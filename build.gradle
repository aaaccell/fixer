plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.nemerosa.versioning' version '2.8.2'
    id "com.github.breadmoirai.github-release" version "2.2.12"
}

versioning {
    displayMode = 'snapshot' // how to compute version on non-release-branches
    dirty = { t -> t }
    branchEnv = ['TRAVIS_BRANCH', 'GIT_BRANCH', 'SVN_BRANCH', 'BRANCH_NAME']
}

githubRelease {
    token project.hasProperty('githubToken') ? githubToken : System.getenv('GITHUB_TOKEN')
    owner "aaaccell"
    repo "fixer"
    tagName versioning.info.display
    targetCommitish versioning.info.commit
    body changelog()
    prerelease versioning.info.display.contains("-SNAPSHOT") ? true : false
}

version = versioning.info.display

repositories {
    jcenter()
}

dependencies {
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.8.0'
    implementation group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '4.8.0'
    implementation group: 'com.squareup.retrofit2', name: 'retrofit', version: '2.9.0'
    implementation group: 'com.squareup.retrofit2', name: 'converter-gson', version: '2.9.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'net.jodah:typetools:0.6.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

test {
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            def nexusHost = project.hasProperty('nexusHost') ? nexusHost : System.getenv('NEXUS_HOST')
            def baseUrl = "http://$nexusHost/repository"
            def repositoryUrl = "$baseUrl/maven-releases/"
            def snapshotRepositoryUrl = "$baseUrl/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotRepositoryUrl : repositoryUrl
            credentials {
                username project.hasProperty('nexusUser') ? nexusUser : System.getenv('NEXUS_USER')
                password project.hasProperty('nexusPassword') ? nexusPassword : System.getenv('NEXUS_PASSWORD')
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            groupId = 'com.aaaccell'
            artifactId = 'fixer'
            pom {
                name = 'Fixer.io'
                description = 'API Wrapper'
                url = 'http://www.fixer.io'
                developers {
                    developer {
                        id = 'mjuchli'
                        name = 'Marc Juchli'
                        email = 'marcjuchli@aaaccell.ch'
                    }

                }
                scm {
                    connection = 'scm:git:git://github.com:aaaccell/fixer.git'
                    developerConnection = 'scm:git:git://github.com:aaaccell/fixer.git'
                    url = 'https://github.com/aaaccell/fixer'
                }
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
